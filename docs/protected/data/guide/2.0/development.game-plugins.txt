~~~
[sourcepawn]
/**
 * When connected to SourceBans database
 *
 * @param database	The database handle
 * @noreturn		
 */
forward SB_OnConnect(Handle:database);

/**
 * When SourceBans config is reloaded
 *
 * @noreturn		
 */
forward SB_OnReload();


/**
 * Connect to SourceBans database
 *
 * @noreturn		
 */
native SB_Connect();

/**
 * Escapes a database string for literal insertion
 *
 * @param string		String to quote.
 * @param buffer		Buffer to store quoted string in.
 * @param maxlength	Maximum length of the buffer.
 * @param written		Optionally returns the number of bytes written.
 * @return					True on success, false if buffer is not big enough.
 *									The buffer must be at least 2*strlen(string)+1.
 * @error						Invalid database or statement Handle.
 */
native bool:SB_Escape(const String:string[], String:buffer[], maxlength, &written = 0);

/**
 * Execute query on SourceBans database and ignore result set
 *
 * @noreturn
 */
native SB_Execute(const String:query[], DBPriority:prio = DBPrio_Normal);

/**
 * Get string value from SourceBans config
 *
 * @param key				The key of the value to retrieve
 * @param buffer		The string buffer to store the value in
 * @param maxlength	The max length of the string buffer
 * @noreturn
 */
native SB_GetConfigString(const String:key[], String:buffer[], maxlength);

/**
 * Get value from SourceBans config
 *
 * @param 	key		The key of the value to retrieve
 * @return	value	The value
 */
native SB_GetConfigValue(const String:key[]);

/**
 * Initialize third party SourceBans plugin in case it was late loaded
 *
 * @noreturn
 */
native SB_Init();

/**
 * Query SourceBans database
 *
 * @noreturn
 */
native SB_Query(SQLTCallback:callback, const String:query[], any:data = 0, DBPriority:prio = DBPrio_Normal);

/**
 * Reload SourceBans config
 *
 * @noreturn		
 */
native SB_Reload();
~~~