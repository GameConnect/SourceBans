# KeyValues

KeyValues or VDF (Valve Data Format) files consist of a root node and any number of sub-keys or sub-sections.  
For example, a file might look like this:
~~~
"MyFile"
{
	"STEAM_0:0:7"
	{
		"name"		"crab"
	}
}
~~~
We can use the [KeyValues] and [SMCParser] classes to handle these files.

## KeyValues

Let's take our MyFile example from above. How could we retrieve the name "crab" given the Steam ID?
~~~
[php]
$kv = new KeyValues('MyFile');
$kv->load('myfile.txt');

echo $kv['STEAM_0:0:7']['name']; // will output "crab"
~~~
The [load()|KeyValues::load] method also accepts a KeyValues string.

To create the MyFile example from a PHP array, pass the array to the constructor:
~~~
[php]
$kv = new KeyValues('MyFile', array(
	'STEAM_0:0:7' => array(
		'name' => 'crab',
	),
));
$kv->save('myfile.txt');
~~~

## SMC Parser

The SMC (SourceMod Config) parser differs from KeyValues in that it's event-based.
Instead of loading the entire structure into memory, it calls listener methods for each section and key/value pair.
Return `false` in any of the methods to stop the rest of the file from being parsed.
Examples of SMC files are *admins.cfg* and *admin_groups.cfg*.

The following example will output the name of each section, followed by each key and their value:
~~~
[php]
class AdminsListener implements ISMCListener
{
	public function NewSection($name)
	{
		echo $name, "\n";
	}
	
	public function KeyValue($key, $value)
	{
		echo $key, ': ', $value, "\n";
	}
	
	public function EndSection() {}
}

$listener = new AdminsListener;
SMCParser::parse('admins.cfg', $listener);
~~~